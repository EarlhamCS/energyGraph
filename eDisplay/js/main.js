/*
	Authors: Tristan Wright, July 2012
	This reads the json formatted data generated by data_gen.py
	the data is piped into the Google Charts API and a graph with controls are made

	If more buildings are added increment buildingNum and add
	a new color to buildingColors

	Benchmark functions or sections by wrapping them in:
	console.log(var a = new Date()-0);
	console.log(var b = new Date()-0 - a);
*/

//init globals

//fix header in Chrome on OSX
/*
if(navigator.userAgent.toLowerCase().indexOf('chrome') > -1 &&
	navigator.userAgent.toLowerCase().indexOf('macintosh') > -1)
	$('#page-title').addClass('chrome');
*/
 
//adaptive screen height.
var graphHeight = Math.floor($(document).height() * .6);
$("#dashboard").css("height", graphHeight+20);

//chart data source is global so we don't have to reload every time.
var lineChartJSONData = jQuery.ajax({
	url: "line_chart.txt", //location/name of data file
	dataType: "json",
	async: false
	}).responseText;

var whichBuildings = new Array();
const buildingNum = 8; //change this number as more buildings are added

for(i=0; i < buildingNum; i++)
	whichBuildings[i] = true;

//change colors here
var buildingColors = new Array( '#9c1c34','#0A22af', '#ff381a','#00ff00',
								'#009944','#50D8F1','#e9af32', '#E07628');

for(i = 0; i < buildingNum; i++){
	document.styleSheets[0].cssRules[i+1].style.backgroundColor = buildingColors[i]
}

//for permalink parsing
var plainURL = "http://proto.cs.earlham.edu/~energy/production/eDisplay/";
if(document.URL != plainURL && document.URL != plainURL + "index.html"){
	var permalinked = true;
	var args = (document.URL).slice(plainURL.length+1);
	var argsArray = args.split("+");

	var startTemp = parseDate(argsArray[0]);
	var endTemp = parseDate(argsArray[1]);
	var whichArgs = parseInts(argsArray[2].split(""));

	if(startTemp < endTemp){
		var startDate = startTemp;
		var endDate = endTemp;
		for(i=0; i<whichArgs.length; i++)
			whichBuildings[whichArgs[i]] = flip(whichBuildings[whichArgs[i]]);
		parseButtons();
		}
}
else{
	var today 	  = new Date();
	var endDate	  = new Date(today);
	var startDate = new Date(today.setDate(today.getDate() - 7));
	var whichArgs = new Array();
}

function flipAndRedraw(which){
	whichBuildings[which] = flip(whichBuildings[which])
	redrawVis(whichBuildings);
}

function flip(val){
	if(val === false)
		val = true;
	else
		val = false;
	return val;
}

function redrawVis(values){
	var tmp = removeIndices();
	var buildings = tmp[0];
	var graphColors = tmp[1];

	//do not redraw if all buildings are unchecked.
	if (buildings.length != buildingNum)
		drawLineChart(buildings, graphColors);
}

function drawLineChart(buildingArray, colors){
	var dashboard = new google.visualization.Dashboard(
			 document.getElementById('dashboard'));

	if(colors.length == 0){
		colors = buildingColors;
	}

	//this should only run once.
	if(permalinked){
		var tmp = removeIndices();
		buildingArray = tmp[0];
		colors = tmp[1];
		permalinked = false;
	}

	//chart data table with data source.
	var lineChartData = new google.visualization.DataTable(lineChartJSONData);

	//rename column from " total" to "Total"
	lineChartData.setColumnLabel(1, 'Total');

	//remove unchecked columns, less columns increases ui performance
	for(i=0; i < buildingArray.length; i++)
	  	lineChartData.removeColumn(buildingArray[i]);

	//which columns to show, used in chart and control wrappers.
	var displayCols = new Array();
	for(i=0; i < buildingNum-(buildingArray.length); i++)
		displayCols.push(i+1);

	//which rows to graph in the control bar
	var cutoff = 24
	var controlRangeRows = new Array();
    for (var i = 0; i < lineChartData.getNumberOfRows()-cutoff; i++) {
        if (!(i % 100)) {
            controlRangeRows.push(i);
        }
    }

	for (var i = lineChartData.getNumberOfRows()-cutoff; i < lineChartData.getNumberOfRows(); i++){
		controlRangeRows.push(i);
    }

	//control bar settings below chart
	var controlWrapper = new google.visualization.ControlWrapper({
		   'controlType': 'ChartRangeFilter',
		   'containerId': 'control',
		   'options': {
			 // Filter by the date axis.
			'filterColumnIndex': 0,
			'ui': {
				'chartType': 'LineChart',
				'chartOptions': {
                			'chartArea': {'width': '100%', 'height': 75},
                			'colors': colors,
                			'hAxis': {'baselineColor': 'none'}},
                'chartView':{
                			'rows':controlRangeRows,
                			'columns':[0].concat(displayCols)
                			},
				//1 day in milliseconds = 24 * 60 * 60 * 1000 = 86,400,000
				'minRangeSize': 86400000
			 	} //close ui
		   }, // Initial range: (yyyy-mm-dd)
			'state': {'range': {'start': startDate, 'end': endDate}}
		 });

	//chart settings
	var chartWrapper = new google.visualization.ChartWrapper({
	   'chartType': 'LineChart',
	   'containerId': 'lineChart',
	   'options':{
				 // Use the same chart area width as the control for axis alignment.
				//'curveType':'function',x
				'width': '100%','height':graphHeight,
				'fontName':'Georgia',
				'vAxis': {	'title':'Individual Building Usage in Kilowatts',
							'viewWindow': {'min':5}},
				'hAxis': {	'slantedText': true,
							'format':'EEE MMM d, ha', //ICU Simple Date Format
							'textStyle':{'fontSize':14},
							'gridlines':{'count':0, 'color': '#fff'}},
				'colors': colors,
				'legend': 'none'
				},//close options
		/* Convert the first column from 'date' to 'string',
		   concatenate which column indexes to show, this enables a discrete axis.
		'view':[{ 'calc': function(dataTable, rowIndex){
							return dataTable.getFormattedValue(rowIndex, 0);},
				'type': 'string'}].concat(displayCols)}*/
		}); //close chart_wrapper

	//if Total column is being drawn, add appropriate options
	if (lineChartData.getColumnLabel(1)==="Total"){
		controlWrapper.setOption('ui.chartOptions.colors',colors.slice(1));
		controlWrapper.setOption('ui.chartView.columns',[0].concat(displayCols.slice(1)));
		chartWrapper.setOption('series',{0:{'targetAxisIndex': 1}});
		chartWrapper.setOption('vAxes', {1:{'title':'Total Campus Usage in Kilowatts',
											'titleColor':buildingColors[0],
											'textColor':buildingColors[0],
											'gridlines':{'color':'#fff'}}});
		}

	var a = new Array();
	for(i=0; i<buildingNum-1; i++)
		a.push(2);
	//if all other buildings are unchecked draw the total line in the control chart
	if(equalArrays(buildingArray,a)){
		controlWrapper.setOption('ui.chartView.columns',[0,1]);
		controlWrapper.setOption('ui.chartOptions.colors',['#9c1c34']);
		chartWrapper.setOption('vAxes', {1:{'title': 'Total Campus Usage in Kilowatts',
											'titleColor':buildingColors[0],
											'textColor':buildingColors[0],
											'gridlines':{'color':'#ccc'}}});
	}

	//event handler saves date
	google.visualization.events.addListener(controlWrapper, 'statechange',
						function(){
							startDate = controlWrapper.getState().range.start;
							endDate   = controlWrapper.getState().range.end;

						});
	google.visualization.events.addListener(chartWrapper, 'ready', resizeControls);

	dashboard.bind(controlWrapper, chartWrapper); //bind control to chart,
	dashboard.draw(lineChartData);		//draw chart from data table

	setTimeout('location.reload(true);', 600000); //refresh every 10 minutes
}

function overlay() {
	var ol = document.getElementById("overlay")
	ol.style.visibility = (ol.style.visibility == "visible") ? "hidden" : "visible";
}

function equalArrays(arr1, arr2){
	if(arr1.length != arr2.length)
		return false;

	for(i=0; i < arr1.length; i++)
		if(arr1[i] != arr2[i])
			return false;

	return true;
}

function parseDate(urlArg){
	var dateArr = urlArg.split("-");
	return new Date(parseInt(dateArr[0]), parseInt(dateArr[1]), parseInt(dateArr[2]));
}

function parseInts(strArray){
	var a = new Array();
	for(i=0; i < strArray.length; i++)
		a.push(parseInt(strArray[i]));
	return a;
}

function parseButtons(){
	for(i=0;i<whichBuildings.length;i++){
		if(!whichBuildings[i])
			//jQuery call unchecks buttons
			$(document.getElementsByClassName("btn")[i]).removeClass("active");
		}
}

function removeIndices(){
	var colors = new Array();
	var bldgs = new Array();
	var removed = 0;

	for(i=0; i < whichBuildings.length; i++){
		if(!whichBuildings[i]){
			bldgs.push( (i+1) - removed); //column indices change as you remove them
			removed++;
			}
		else
			colors.push(buildingColors[i]);
	}
	return [bldgs, colors];
}

function genPermalink(){
	var startStr = startDate.getFullYear()+"-"+startDate.getMonth()+"-"+startDate.getDate();
	var endStr = endDate.getFullYear()+"-"+endDate.getMonth()+"-"+endDate.getDate();
	var buttons = "";
	for(i=0; i < buildingNum; i++){
		if(!whichBuildings[i])
			buttons += i;
	}
	return plainURL+"?"+startStr+"+"+endStr+"+"+buttons;
}

//this works, but where do I put it?
function resizeControls() {
	//a less styled one var left = "M3,17L7,17L15,30L15,40L7,53L3,53L-5,40L-5,30Z";
	var left = "M-5,17L10,17L10,30L10,40L10,53L-5,53L-5,40L-5,30Z"
	var right = "M-1,17L15,17L15,30L15,40L15,53L-1,53L-1,40L-1,30Z";

	//ugly, but it works so long as google doesn't change how stuff is laid out.
	$(document.getElementsByTagName("svg")[2]
		.getElementsByTagName("g")[1]
		.getElementsByTagName("path")[1])
		.attr("d", left);

	$(document.getElementsByTagName("svg")[2]
		.getElementsByTagName("g")[2]
		.getElementsByTagName("path")[1])
		.attr("d", right);
}

